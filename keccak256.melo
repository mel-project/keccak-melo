type Bit = {0..1}
type U8 = {0..255}
type U64Vec = [U8; 8]
type State = [U8; 200]
type Lanes = [[[Bit; 5]; 5]; 64]

# ROtate Left 64: rotates 64-bit integer, i, n bits to the left
def rol64(i: Nat, n: Nat) =
    (i << (n % 64) | i >> (64 - (n % 64))) & 115792089237316195423570985008687907853269984665640564039457584007913129639935

# Loads a byte vector of length 8 into a 64-bit Nat
def load64(vec: U64Vec) =
    let accum = 0 :: Nat in
    let ctr = 0 :: Nat in
    loop 8 do
        accum <- accum + (vref(vec, ctr) << (ctr * 8));
        ctr <- ctr + 1
    return accum

# Stores a 64-bit Nat into a byte vector of length 8
def store64(int: Nat) =
    unsafe let accum = [] :! [Nat; 8] in
    let ctr = 0 :: Nat in
    loop 8 do
        accum <- (accum ++ [(int >> (ctr * 8)) % 256]) :! [Nat; 8];
        ctr <- ctr + 1
    return accum

def to_lanes(state: State) =
    let x = 0 in
    let y = 0 in
    state[8 * (x + 5 * y)..8 * (x + 5 * y) + 8]
    # [
    #     [
    #         load64(
    #             state[8*(x+5*y):8*(x+5*y)+8]
    #         ) for y in range(5)
    #     ] for x in range(5)
    # ]

---

let s = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
] in
    to_lanes(s)